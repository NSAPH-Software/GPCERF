% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_sd_gp.R
\name{compute_sd_gp}
\alias{compute_sd_gp}
\title{Compute Posterior Credible Interval}
\usage{
compute_sd_gp(
  w,
  scaled_obs,
  hyperparam,
  sigma,
  GPS_m,
  kernel_fn = function(x) exp(-x^2)
)
}
\arguments{
\item{w}{A scalar of exposure level of interest.}

\item{scaled_obs}{A matrix of two columns.
\itemize{
\item First column is the scaled GPS value of all samples (GPS * 1/sqrt(alpha))
\item Second column is the scaled exposure value of all samples (w * 1/sqrt(beta))
}}

\item{hyperparam}{A vector of hyper-parameters for the GP.
\itemize{
\item First element: alpha
\item Second element: beta
\item Third element: gamma/sigma
}}

\item{sigma}{A scaler that represents noise.}

\item{GPS_m}{A data.table of GPS vectors.
\itemize{
\item Column 1: A vector of estimated GPS evaluated at the observed exposure levels.
\item Column 2: Estimated conditional means of the exposure given covariates
for all samples (e_gps_pred).
\item Column 3: Estimated conditional standard deviation of the exposure given
covariates for all samples (e_gps_std).
}}

\item{kernel_fn}{The covariance function of GP.}
}
\value{
Posterior credible interval (scaler) for the requested exposure level (w).
}
\description{
Computes posterior credible interval for requested exposure level
}
\examples{


set.seed(284)
#Generate synthetic data
data <- generate_synthetic_data(sample_size = 200, gps_spec = 3)
w_obs <- obs_exposure <- data$treat

# Choose an exposure level to compute CERF
w = 1.2

# Define kernel function
kernel_fn <- function(x) exp(-x^2)

# Estimate GPS function
GPS_m <- train_GPS(cov.mt = as.matrix(data[,-(1:2)]),
                   w.all = as.matrix(data$treat))

GPS <- GPS_m$GPS

# set hyperparameters
hyperparam <- c(0.1, 0.4, 1)
alpha <- hyperparam[[1]]
beta <- hyperparam[[2]]
g_sigma <- hyperparam[[3]]

# Compute scaled observation data and inverse of covariate matrix.
scaled_obs <- cbind(obs_exposure*sqrt(1/alpha), GPS*sqrt(1/beta))

tentative_sigma <- 0.1

post_sd <- GPCERF:::compute_sd_gp(w = w,
                                 scaled_obs = scaled_obs,
                                 hyperparam = hyperparam,
                                 sigma = tentative_sigma,
                                 GPS_m = GPS_m,
                                 kernel_fn = kernel_fn)

}
